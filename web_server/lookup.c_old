#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <libxml/xmlreader.h>

#include "include/standard.h"
#include "lookup.h"

xmlTextReaderPtr createXMLReader(char *configfile)
{
    xmlTextReaderPtr reader;

    if((reader = xmlReaderForFile(configfile, NULL, 0)) == NULL)
    {
        fprintf(stderr, "Can not open [%s]\n", configfile);
        return(NULL);
    }
    return(reader);
}

void processXMLTag(char *requestpath, found_struct *found, 
                   xmlTextReaderPtr reader, path_struct *settings)
{
    const xmlChar *name, *value;
    xmlChar *type, *attr_path;
    int nodetype;


    name = xmlTextReaderConstName(reader);
    value = xmlTextReaderConstValue(reader);
    nodetype = xmlTextReaderNodeType(reader);

    if(strcmp(name, ROUTE) == 0 && nodetype == OPEN)
    {
        if(xmlTextReaderHasAttributes(reader) > 0)
        {
            if((attr_path = xmlTextReaderGetAttribute(reader, "path")) != NULL)
            {
                if(strcmp(attr_path, requestpath) == 0)
                {
                    strcpy(settings->url, (char*)attr_path);
                    found->found_root = true;
                    settings->found = true;
                }
            }
        }
    }
    else if(cmp(name, ROUTE) && nodetype == CLOSE)
    {
        found->found_root = false;
    }
    else if(cmp(name, PROGRAMM) && nodetype == OPEN 
            && found->found_root == true)
    {
        found->found_prog = true;
    }
    else if(cmp(name, PROGRAMM) && nodetype == CLOSE)
    {
        found->found_prog = false;
    }
    else if(cmp(name, TEXT) && found->found_prog == true
            && found->found_root == true)
    {
        strcpy(settings->programm, value);
        settings->found_programm = true;
        found->found_prog = false;
    }
    else if(cmp(name, ALIAS) && nodetype == OPEN 
            && found->found_root == true)
    {
        found->found_alias = true;
    }
    else if(cmp(name, ALIAS) && nodetype == CLOSE)
    {
        found->found_alias = false;
    }
    else if(cmp(name, TEXT) && found->found_alias == true
            && found->found_root == true)
    {
        strcpy(settings->alias, value);
        settings->found_alias = true;
        found->found_alias = false;
    }
    else if(cmp(name, RETURN) && nodetype == OPEN 
            && found->found_root == true)
    {
        found->found_return = true;
    }
    else if(cmp(name, RETURN) && nodetype == CLOSE)
    {
        found->found_return = false;
    }
    else if(cmp(name, TEXT) && found->found_return == true
            && found->found_root == true)
    {
        strcpy(settings->returncode, value);
        settings->found_returncode = true;
        found->found_return = false;
    }
    else if(cmp(name, LIBRARY) && nodetype == OPEN 
            && found->found_root == true)
    {
        found->found_library = true;
    }
    else if(cmp(name, LIBRARY) && nodetype == CLOSE)
    {
        found->found_library = false;
    }
    else if(cmp(name, TEXT) && found->found_library == true
            && found->found_root == true)
    {
        strcpy(settings->library, value);
        settings->found_library = true;
        found->found_library = false;
    }

}

path_struct readXMLConfig(char *requestpath, char *configfile)
{
    int ret;
    found_struct found;
    path_struct settings = {"", "", "", "", "", false, false, false, false, false};
    xmlTextReaderPtr reader = createXMLReader(configfile);

    ret = xmlTextReaderRead(reader);
    while(ret == 1)
    {
        processXMLTag(requestpath, &found, reader, &settings);
        ret = xmlTextReaderRead(reader);
    }

    xmlFreeTextReader(reader);

    return(settings);
}

path_struct getpathsettings(char *requestpath)
{
    path_struct settings = readXMLConfig(requestpath, "./test.xml");
    return(settings);
}
