# Template for the real Makefile.
# If you want to change the makefile, change this file and run the build script


CC = {{CC}}
AR = {{AR}}
ARARGS = -vcru
CARGS1 = {{CARGS1}}
CARGS2 = {{CARGS2}}

LDARGS1_SO = {{LDARGS1_SO}}
LDARGS2_SO = {{LDARGS2_SO}}

JAVACLASSPATH = {{CLASSPATH}}
CURDIR = {{CURWD}}
JARBIN = {{JARBIN}}
JAVAC = {{JAVACBIN}}

jni_so_obj = main.o natural.o
# Workaround for tricking make to see .java files in $*. The files in this target 
# are NOT C object but java source files
servlet_utils = RH4NReturn.o RH4NParams.o JNINatural.o JNILoader.o Router.o ConfigurationLoader.o

INCLUDES = -I{{JAVAINC}} \
		   -I{{JAVAINC}}/linux/ \
		   -I./TomcatConnector/jniLibrary/include/ \
		   -I./natuser_lib/src/ \
		   -I./include/ \
     	   -I./libs/varhandle_lib/src/ \
		   -I./libs/hexdump/src/ \
		   -I./libs/utils/src/ \
		   -I./libs/nat-lda-parser/src/ \
		   -I./libs/html_parser/src/ \
		   -I./var2names/src/ \
 		   -I./libs/json_generator/include/

LIBS = -L./libs/varhandle_lib/ -lvars \
	   -L./libs/utils/ -lutils \
	   -L./libs/nat-lda-parser/ -lldaparser \
	   -L./libs/html_parser/ -lhtml_parser \
	   -L./var2names/ -lvar2name \
	   -L./libs/json_generator/ -lgenjson


ALLDEPS = clean TomcatConnector_target utils varlib ldaparser var2name \
	jsongenerator htmlparser natuserlib 


all: $(ALLDEPS)
	@printf "Finish..."

#                         +------------------+
#-------------------------| Tomcat Connector |---------------------------------
#                         +------------------+

TomcatConnector_target: connector_utils connector_jnilib 
	@mkdir -p ./TomcatConnector/servlet/web/WEB-INF/classes
	@printf "JAVAC ./TomcatConnector/servlet/src/realHTMLServlet.java\n"
	@$(JAVAC) -classpath $(JAVACLASSPATH) ./TomcatConnector/servlet/src/realHTMLServlet.java
	@cp ./TomcatConnector/servlet/src/realHTMLServlet.class ./TomcatConnector/servlet/web/WEB-INF/classes/
	@printf "Creating ./TomcatConnector/servlet/realHTML4Natural.war\n"
	@cd ./TomcatConnector/servlet/web/ && $(JARBIN) cvf ../realHTML4Natural.war .
	@printf "created war file in %s\n" $(CURDIR)
	@printf "Done compiling TomcatConnector.\n"
	
connector_jnilib: $(jni_so_obj)
	@printf "LD ./TomcatConnector/librealHTMLconnector.so\n"
	@$(CC) $(LDARGS1_SO) -o ./TomcatConnector/librealHTMLconnector.so ./TomcatConnector/jniLibrary/bin/*.o

$(jni_so_obj):
	@printf "CC ./TomcatConnector/jniLibrary/src/$*.c --> ./TomcatConnector/jniLibrary/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./TomcatConnector/jniLibrary/bin/$*.o ./TomcatConnector/jniLibrary/src/$*.c

connector_utils: $(servlet_utils)
	@mkdir -p ./TomcatConnector/servlet/web/WEB-INF/lib
	@printf "Creating ./TomcatConnector/servlet/web/WEB-INF/lib/realHTMLconnector.jar\n"
	@cd ./TomcatConnector/servlet/src/ && $(JARBIN) cvf ../web/WEB-INF/lib/realHTMLconnector.jar ./realHTML

$(servlet_utils):
	@printf "JAVAC ./TomcatConnector/servlet/src/realHTML/tomcat/connector/$*.java\n"
	@$(JAVAC) -classpath $(JAVACLASSPATH) ./TomcatConnector/servlet/src/realHTML/tomcat/connector/$*.java


#                         +-----------------+
#-------------------------| Natuser Library |----------------------------------
#                         +-----------------+

NATUSER_OBJS = ncuxinit.o gen_page.o gen_json.o gen_json_objs.o jumptab.o natutils.o 
NATUSER_VAR_OBJS = a_handling.o n_handling.o l_handling.o i_handling.o u_handling.o

natuserlib: varlib $(NATUSER_OBJS)
	@printf "AR ./natuser_lib/librealHTML4Natural.so\n"
	@$(CC) $(LDARGS1_SO) ./natuser_lib/bin/*.o $(LIBS) $(LDARGS2_SO) -o ./natuser_lib/librealHTML4Natural.so

$(NATUSER_OBJS): $(NATUSER_VAR_OBJS)
	@printf "CC ./natuser_lib/src/$*.c --> ./natuser_lib/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./natuser_lib/bin/$*.o ./natuser_lib/src/$*.c

$(NATUSER_VAR_OBJS):
	@printf "CC ./natuser_lib/src/variablen_handling/$*.c --> ./natuser_lib/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./natuser_lib/bin/$*.o ./natuser_lib/src/variablen_handling/$*.c


#                         +------------------+
#-------------------------| Variable Library |---------------------------------
#                         +------------------+

VARLIBS_OBJS = bool.o float.o integer.o string.o utils.o groups.o
VARLIBS_PRINT_OBJS = p_bool.o p_float.o p_string.o p_integer.o print.o

varlib: $(VARLIBS_OBJS)
	@printf "AR ./libs/varhandle_lib/libvars.a\n"
	@$(AR) $(ARARGS) ./libs/varhandle_lib/libvars.a ./libs/varhandle_lib/bin/*.o \
		./libs/varhandle_lib/bin/print/*.o

$(VARLIBS_OBJS): $(VARLIBS_PRINT_OBJS)
	@printf "CC ./libs/varhandle_lib/src/$*.c --> ./libs/varhandle_lib/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/varhandle_lib/bin/$*.o ./libs/varhandle_lib/src/$*.c

$(VARLIBS_PRINT_OBJS):
	@printf "CC ./libs/varhandle_lib/src/print/$*.c --> ./libs/varhandle_lib/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/varhandle_lib/bin/print/$*.o ./libs/varhandle_lib/src/print/$*.c


#                         +------------+
#-------------------------| LDA Parser |---------------------------------------
#                         +------------+

LDAPARSER_OBJS = startldaparser.o printLDA.o free.o

ldaparser: $(LDAPARSER_OBJS)
	@printf "AR ./libs/nat-lda-parser/libldaparser.a\n"
	@$(AR) $(ARARGS) ./libs/nat-lda-parser/libldaparser.a ./libs/nat-lda-parser/bin/*.o

$(LDAPARSER_OBJS):
	@printf "CC ./libs/nat-lda-parser/src/$*.c ./libs/nat-lda-parser/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/nat-lda-parser/bin/$*.o ./libs/nat-lda-parser/src/$*.c

#                         +----------------+
#-------------------------| JSON Generator |----------------------------------- 
#                         +----------------+

JSONGEN_OBJS = start_json.o print_funcs.o

jsongenerator: $(JSONGEN_OBJS)
	@printf "AR ./libs/json_generator/libgenjson.a\n"
	@$(AR) $(ARARGS) ./libs/json_generator/libgenjson.a

$(JSONGEN_OBJS):
	@printf "CC ./libs/json_generator/src/$*.c --> ./libs/json_generator/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/json_generator/bin/$*.o ./libs/json_generator/src/$*.c


#                         +-----------+
#-------------------------| VAR2NAMES |---------------------------------------- 
#                         +-----------+

VAR2NAME_OBJS = startv2n.o

var2name: $(VAR2NAME_OBJS)
	@printf "AR ./var2names/libvar2name.a\n"
	@$(AR) $(ARARGS) ./var2names/libvar2name.a ./var2names/bin/*.o

$(VAR2NAME_OBJS):
	@printf "CC ./var2names/src/$*.c --> ./var2names/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./var2names/bin/$*.o ./var2names/src/$*.c


#                         +------+
#-------------------------| utis |--------------------------------------------- 
#                         +------+

UTIL_OBJS = rh4n_utils.o

utils: $(UTIL_OBJS)
	@printf "AR ./libs/utils/libutils.a\n"
	@$(AR) $(ARARGS) ./libs/utils/libutils.a ./libs/utils/bin/*.o

$(UTIL_OBJS):
	@printf "CC ./libs/utils/src/$*.c --> ./libs/uitls/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/utils/bin/$*.o ./libs/utils/src/$*.c
	

#                         +------+
#-------------------------| utis |--------------------------------------------- 
#                         +------+

HTMLPARSER_OBJS = start.o line_parser.o command_parsing.o exec_if.o \
	  exec_macro.o for.o for_cmd.o for_startvalues.o if.o json.o \
	  macro.o token_handling.o variablen_parsing.o variablen_handling.o

htmlparser: $(HTMLPARSER_OBJS)
	@printf "AR ./libs/html_parser/libhtml_parser.a\n"
	@$(AR) $(ARARGS) ./libs/html_parser/libhtml_parser.a ./libs/html_parser/bin/*.o

$(HTMLPARSER_OBJS):
	@printf "CC ./libs/html_parser/src/$*.c --> ./libs/html_parser/bin/$*.o\n"
	@$(CC) $(CARGS1) $(INCLUDES) -o ./libs/html_parser/bin/$*.o ./libs/html_parser/src/$*.c


clean:
	find ./ -name  '*.[oa]' -exec rm {} \;
	find ./ -name  '*.so' -exec rm {} \;
	find ./ -name  '*.class' -exec rm {} \;
	find ./ -name  '*.war' -exec rm {} \;
