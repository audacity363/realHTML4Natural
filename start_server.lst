IBM XL C for AIX, Version 12.1.0.0 start_server.c 07/15/16 14:03:05 (C)

>>>>> SOURCE SECTION <<<<<

        1 | #include <stdio.h>
        2 | #include <stdlib.h>
        3 | #include <string.h>
        4 | #include <fcntl.h>
        5 | #include <sys/wait.h>
        6 | #include <sys/types.h>
        7 | #include <signal.h>
        8 | #include <errno.h>
        9 | 
       10 | #include "natuser.h"
       11 | 
       12 | #define VARLENGTH 20 
       13 | #define ARRAYLENGTH 20
       14 | #define LOGFILEPATH "/tmp/t_engemann.log"
       15 | 
       16 | int call_subprog(char*);
       17 | 
       18 | long start_web_server( WORD nparm, void *parmhandle, void *traditional )
       18 + long start_web_server( unsigned short nparm, void *parmhandle, void *traditional )
       19 | {
       20 |     start_web_server_from_nat(&call_subprog);
       21 |     return((long)0);
       22 | }
       23 | 
       24 | void nat_signalHandler(int signal)
       25 | {
       26 |     fprintf(stderr, "Recv Signal: [%d]\n", signal);
       26 +     fprintf((&_iob[2]), "Recv Signal: [%d]\n", signal);
       27 | }
       28 | 
       29 | int call_subprog(char *programm)
       30 | {
       31 |     int i,
       32 |         arraylength = ARRAYLENGTH;
       32 +         arraylength = 20;
       33 |     pid_t nat_pid;
       34 |     sigset_t mask;
       35 |     sigset_t orig_mask;
       36 |     struct timespec timeout;
       37 |     int timeout_bool = 0;
       38 | 
       39 |     char req_type[] = "POST";
       40 |     char keys[VARLENGTH];
       40 +     char keys[20];
       41 |     char values[VARLENGTH];
       41 +     char values[20];
       42 | 
       43 |     printf("Starting Subprog [%s]\n", programm);
       44 |     nat_pid = fork();
       45 |     if(nat_pid == 0)
       46 |     {
       47 |         //Child
       48 |         FILE *error_file;
       49 |         int nat_rc;
       50 |         struct parameter_description pass[3], test;
       51 |         void *myparmhandle;
       52 |         int arraylength = ARRAYLENGTH;
       52 +         int arraylength = 20;
       53 | 
       54 |         error_file = fopen("/tmp/nat_error.log", "w");
       55 |         dup2(fileno(error_file), 2);
       55 +         dup2(((error_file)->_file), 2);
       56 |         close(fileno(error_file));
       56 +         close(((error_file)->_file));
       57 | 
       58 |         for(i=0; i < NSIG; i++)
       58 +         for(i=0; i < (255+1); i++)
       59 |         {
       60 |             signal(i, nat_signalHandler);
       61 |         }
       62 | 
       63 |         /*Create Datasets for Subprog Call*/
       64 |         /*Aus irgendeinem Grund Funktionieren die Parameter hier nicht. 
       65 |          * Warum bin ich mir noch nicht ganz sicher, da sich der Prozess ohne ein Signal beendet
       66 |          * Ersteinmal werden also keine Parameter mit uebergeben
       67 |          */
       68 |         /*ncxr_create_parm(4, &myparmhandle);
       69 | 
       70 |         ncxr_init_parm_sa(1, myparmhandle, 'A', VARLENGTH, 0, 1, &arraylength, 0);
       71 |         ncxr_init_parm_sa(2, myparmhandle, 'A', VARLENGTH, 0, 1, &arraylength, 0);
       72 | 
       73 |         switch(ncxr_init_parm_s(3, myparmhandle, 'A', 4, 0, 0))
       74 |         {
       75 |             case -1:
       76 |                 exit(2);
       77 |             case -2:
       78 |                 exit(3);
       79 |             case -6:
       80 |                 exit(4);
       81 |             case -8:
       82 |                 exit(5);
       83 |             case -9:
       84 |                 exit(6);
       85 |         }
       86 | 
       87 | 
       88 |         for(i=0; i < 20; i++)
       89 |         {
       90 |             sprintf(keys, "key %d", i);
       91 |             sprintf(values, "value %d", i);
       92 |             ncxr_put_parm_array(1, myparmhandle, VARLENGTH, values, &i);
       93 |             ncxr_put_parm_array(2, myparmhandle, VARLENGTH, keys, &i);
       94 |         }
       95 | 
       96 |         if(ncxr_put_parm(3, myparmhandle, 4, req_type) < 0)
       97 |         {
       98 |             exit(7);
       99 |         }
      100 | 
      101 | 
      102 |         memset(pass, 0, sizeof(pass));
      103 | 
      104 |         ncxr_get_parm_info(1, myparmhandle, &pass[0]);
      105 |         ncxr_get_parm_info(2, myparmhandle, &pass[1]);
      106 |         ncxr_get_parm_info(3, myparmhandle, &pass[2]);*/
      107 |         /*End Datasets*/
      108 | 
      109 |         fprintf(stderr, "Calling ncxr_if4_callnat\n"); 
      109 +         fprintf((&_iob[2]), "Calling ncxr_if4_callnat\n"); 
      110 | 
      111 |         //Aufruf mit Parametern !!!FUNKTIONIERT NICHT!!!
      112 |         //nat_rc = ncxr_if4_callnat(programm, 3, pass);
      113 |         nat_rc = ncxr_if4_callnat(programm, 0, 0);
      114 |         fprintf(stderr, "Nat return Code: [%d]\n", nat_rc);
      114 +         fprintf((&_iob[2]), "Nat return Code: [%d]\n", nat_rc);
      115 |         exit(0);
      116 |     }
      117 |     //Parent
      118 | 
      119 |     timeout.tv_sec = 5;
      120 |     timeout.tv_nsec = 0;
      121 |     int status, waitrc, i_timeout = 0;
      122 | 
      123 | 
      124 |     printf("Wait for Child to exit\n");    
      125 |     do
      126 |     {
      127 |         waitrc = waitpid(nat_pid, &status, WNOHANG);
      127 +         waitrc = waitpid(nat_pid, &status, 0x1);
      128 |         if(waitrc < 0)
      129 |         {
      130 |             printf("Error\n");
      131 |             break;
      132 |         }
      133 |         if(waitrc > 0) 
      134 |         {
      135 |             break;
      136 |         }
      137 |         if(++i_timeout >= 10)
      138 |         {
      139 |             printf("Timeout\n");
      140 |             kill(nat_pid, SIGKILL);
      140 +             kill(nat_pid, 9);
      141 |             break;
      142 |         }
      143 |         sleep(1);
      144 |         
      145 |     }while(1);
      146 | 
      147 |     return(0);
      148 | }

>>>>> OPTIONS SECTION <<<<<

IBM XL C for AIX, Version 12.1.0.0
***   Command Line Invocation ***
***   Options In Effect   ***

CPLUSCMT            LIST                NORO                NOROCONST          
SOURCE              THREADED           

64BIT
OPTIMIZE=2
LANGLVL=EXTENDED:NOUCS:NOTEXTAFTERENDIF
MAXMEM=-1



>>>>> FILE TABLE SECTION <<<<<

                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    start_server.c              07/14/16   09:30:17
     1    /usr/include/stdio.h        02/20/13   00:22:36      0       1
     2    /usr/include/standards.h    05/22/12   18:32:38      1      43
     3    /usr/include/va_list.h      09/22/09   00:15:51      1     201
     4    /usr/include/sys/types.h    10/20/14   20:33:04      1     477
     5    /usr/include/strict_stdtypes.h
                                      09/22/09   00:15:35      4      58
     6    /usr/include/sys/inttypes.h 09/21/09   23:29:47      4      61
     7    /usr/include/stdint.h       07/11/14   14:45:12      6      51
     8    /usr/include/end_strict_stdtypes.h
                                      09/22/09   00:14:42      4      64
     9    /usr/include/sys/m_types.h  09/21/09   23:29:09      4     485
    10    /usr/include/sys/vm_types.h 03/09/10   00:46:51      9      40
    11    /usr/include/sys/limits.h   01/18/14   00:30:51      1     554
    12    /usr/include/float.h        02/20/13   00:22:36     11     306
    13    /usr/vac/include/stdlib.h   02/24/12   06:48:10      0       2
    14    /usr/include/stdlib.h       02/20/13   00:22:36     13      21
    15    /usr/include/sys/wait.h     12/13/12   21:55:09     14     355
    16    /usr/include/end_strict_stdtypes.h
                                      09/22/09   00:14:42     15      39
    17    /usr/include/sys/resource.h 10/14/09   05:19:06     15      47
    18    /usr/include/sys/time.h     07/12/13   23:50:35     17      57
    19    /usr/include/sys/signal.h   05/31/13   19:40:10     15      50
    20    /usr/include/sys/context.h  08/25/14   21:16:34     19     356
    21    /usr/include/sys/m_param.h  09/21/09   23:29:08     20      39
    22    /usr/include/sys/mstsave.h  01/24/14   23:47:18     20      40
    23    /usr/include/sys/m_signal.h 09/21/09   23:29:08     19     631
    24    /usr/include/sys/localedef.h
                                      02/24/10   19:06:12     14     617
    25    /usr/include/sys/lc_core.h  09/21/09   23:29:52     24      45
    26    /usr/include/locale.h       06/20/11   17:37:09     24      46
    27    /usr/include/sys/localedef31.h
                                      09/21/09   23:29:54     24      48
    28    /usr/vac/include/string.h   02/24/12   06:48:10      0       3
    29    /usr/include/string.h       07/26/13   21:58:36     28      60
    30    /usr/include/fcntl.h        06/01/15   16:18:55      0       4
    31    /usr/include/end_strict_stdtypes.h
                                      09/22/09   00:14:42     30      32
    32    /usr/include/sys/flock.h    03/07/14   23:14:21     30     105
    33    /usr/include/unistd.h       11/02/15   19:24:21     30     227
    34    /usr/include/end_strict_stdtypes.h
                                      09/22/09   00:14:42     33      55
    35    /usr/include/sys/access.h   01/05/10   00:19:14     33      58
    36    /usr/include/sys/lockf.h    09/21/09   23:29:55     33     847
    37    /usr/include/sys/stat.h     03/11/13   22:49:18     36      45
    38    /usr/include/end_strict_stdtypes.h
                                      09/22/09   00:14:42     37      43
    39    /usr/include/sys/mode.h     01/27/10   01:04:28     37      51
    40    /usr/include/signal.h       09/22/09   00:15:33      0       7
    41    /usr/include/errno.h        06/06/11   20:14:38      0       8
    42    natuser.h                   05/27/16   07:43:13      0      10


>>>>> COMPILATION EPILOGUE SECTION <<<<<

IBM XL C/C++ Compilers Summary of Diagnosed Conditions

TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0


Source records read.........................................   14191

1501-008  Compilation successful for file start_server.c. Object file created.


>>>>> OBJECT SECTION, OPTIMIZATION <<<<<


 GPR's set/used:   ssus ssss ssss s---  ---- ---- ---- ----
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     nat_signalHandler
   24|                                  PROC      signal,gr3
    0| 000000 mfspr    7C0802A6   1     LFLR      gr0=lr
   26| 000004 ld       E8C20008   1     L8        gr6=._iob(gr2,0)
   26| 000008 ld       E8820010   1     L8        gr4=.$STATIC(gr2,0)
    0| 00000C stdu     F821FF91   1     ST8U      gr1,#stack(gr1,-112)=gr1
   26| 000010 extsw    7C6507B4   1     EXTS4     gr5=gr3
   26| 000014 addi     38840020   1     AI        gr4=gr4,32
   26| 000018 addi     386600B0   1     AI        gr3=gr6,176
    0| 00001C std      F8010080   1     ST8       #stack(gr1,128)=gr0
   26| 000020 bl       4BFFFFE1   1     CALL      gr3=fprintf,3,(*)aggr#1",gr3,(*)Cuchar",gr4,gr5,#ProcAlias",fprintf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   26| 000024 ori      60000000   1
   27| 000028 ld       E9810080   1     L8        gr12=#stack(gr1,128)
   27| 00002C addi     38210070   1     AI        gr1=gr1,112
   27| 000030 mtspr    7D8803A6   1     LLR       lr=gr12
   27| 000034 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 000038        00000000 00002001 80000000 00000038
     |               Instruction count           14
     |               Straight-line exec time     14
 GPR's set/used:   ssus ssss ssss s---  ---- ---- ---- ----
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     start_web_server
   18|                                  PROC      nparm,parmhandle,traditional,gr3-gr5
    0| 000060 mfspr    7C0802A6   1     LFLR      gr0=lr
   20| 000064 ld       E8620020   1     L8        gr3=.call_subprog(gr2,0)
    0| 000068 stdu     F821FF91   1     ST8U      gr1,#stack(gr1,-112)=gr1
    0| 00006C std      F8010080   1     ST8       #stack(gr1,128)=gr0
   20| 000070 bl       4BFFFF91   1     CALL      gr3=start_web_server_from_nat,1,call_subprog",gr3,#ProcAlias",start_web_server_from_nat",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   20| 000074 ori      60000000   1
   21| 000078 addi     38600000   1     LI        gr3=0
   22| 00007C ld       E9810080   1     L8        gr12=#stack(gr1,128)
   22| 000080 addi     38210070   1     AI        gr1=gr1,112
   22| 000084 mtspr    7D8803A6   1     LLR       lr=gr12
   22| 000088 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 00008C        00000000 00002001 80000000 0000002C
     |               Instruction count           11
     |               Straight-line exec time     11
 GPR's set/used:   ssus ssss ssss s---  ---- ---- ---- ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     call_subprog
   29|                                  PROC      programm,gr3
    0| 0000A0 std      FBE1FFF8   1     ST8       #stack(gr1,-8)=gr31
    0| 0000A4 std      FBC1FFF0   1     ST8       #stack(gr1,-16)=gr30
   43| 0000A8 ori      607F0000   1     LR        gr31=gr3
   43| 0000AC ori      60640000   1     LR        gr4=gr3
    0| 0000B0 std      FBA1FFE8   1     ST8       #stack(gr1,-24)=gr29
    0| 0000B4 std      FB81FFE0   1     ST8       #stack(gr1,-32)=gr28
   39| 0000B8 ld       EBC20010   1     L8        gr30=.$STATIC(gr2,0)
    0| 0000BC mfspr    7C0802A6   1     LFLR      gr0=lr
   43| 0000C0 addi     387E0048   1     AI        gr3=gr30,72
    0| 0000C4 std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 0000C8 stdu     F821FF61   1     ST8U      gr1,#stack(gr1,-160)=gr1
   43| 0000CC bl       4BFFFF35   1     CALL      gr3=printf,2,(*)Cuchar",gr3,(*)uchar",gr4,#ProcAlias",printf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   43| 0000D0 ori      60000000   1
   44| 0000D4 bl       4BFFFF2D   1     CALL      gr3=fork,0,#ProcAlias",fork",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   44| 0000D8 ori      60000000   1
   45| 0000DC ori      607C0000   1     LR        gr28=gr3
   45| 0000E0 cmpwi    2C030000   1     C4        cr0=gr3,0
   54| 0000E4 addi     387E0034   1     AI        gr3=gr30,52
   54| 0000E8 ori      63C40000   1     LR        gr4=gr30
   45| 0000EC bc       408200A8   1     BF        CL.3,cr0,0x4/eq,taken=20%(20,80)
   54| 0000F0 bl       4BFFFF11   1     CALL      gr3=fopen,2,(*)Cuchar",gr3,(*)Cuchar",gr4,#ProcAlias",fopen",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   54| 0000F4 ori      60000000   1
   55| 0000F8 addi     38800002   1     LI        gr4=2
   54| 0000FC ori      607D0000   1     LR        gr29=gr3
   55| 000100 lwa      E863002E   1     L4A       gr3=(*)aggr#1._file(gr3,44)
   55| 000104 bl       4BFFFEFD   1     CALL      gr3=dup2,2,gr3,gr4,#ProcAlias",dup2",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   55| 000108 ori      60000000   1
   56| 00010C lwa      E87D002E   1     L4A       gr3=(*)aggr#1._file(gr29,44)
   56| 000110 bl       4BFFFEF1   1     CALL      gr3=close,1,gr3,#ProcAlias",close",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   56| 000114 ori      60000000   1
    0| 000118 addi     38600000   1     LI        gr3=0
   60| 00011C ld       E8820000   1     L8        gr4=.nat_signalHandler(gr2,0)
   58| 000120 addi     3BA00000   1     LI        gr29=0
   58| 000124 ori      60000000   1
   58| 000128 ori      60000000   1
   58| 00012C ori      60210000   1
   58|                              CL.5:
   60| 000130 bl       4BFFFED1   1     CALL      gr3=signal,2,gr3,(*)void()",gr4,#ProcAlias",signal",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
   60| 000134 ori      60000000   1
   58| 000138 addi     3BBD0001   1     AI        gr29=gr29,1
   60| 00013C ld       E8820000   1     L8        gr4=.nat_signalHandler(gr2,0)
   58| 000140 extsw    7FA307B4   1     EXTS4     gr3=gr29
   58| 000144 cmpwi    2C1D0100   1     C4        cr0=gr29,256
   58| 000148 bc       4180FFE8   1     BT        CL.5,cr0,0x1/lt,taken=80%(80,20)
  109| 00014C addi     389E0090   1     AI        gr4=gr30,144
  109| 000150 ld       EBA20008   1     L8        gr29=._iob(gr2,0)
  109| 000154 addi     387D00B0   1     AI        gr3=gr29,176
  109| 000158 bl       4BFFFEA9   1     CALL      gr3=fprintf,2,(*)aggr#1",gr3,(*)Cuchar",gr4,#ProcAlias",fprintf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  109| 00015C ori      60000000   1
  113| 000160 ori      63E30000   1     LR        gr3=gr31
  113| 000164 addi     38A00000   1     LI        gr5=0
  113| 000168 addi     38800000   1     LI        gr4=0
  113| 00016C bl       4BFFFE95   1     CALL      gr3=ncxr_if4_callnat,3,(*)uchar",gr3,gr4,(*)parameter_description",gr5,#ProcAlias",ncxr_if4_callnat",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  113| 000170 ori      60000000   1
  114| 000174 ori      60650000   1     LR        gr5=gr3
  114| 000178 addi     387D00B0   1     AI        gr3=gr29,176
  114| 00017C addi     389E0060   1     AI        gr4=gr30,96
  114| 000180 bl       4BFFFE81   1     CALL      gr3=fprintf,3,(*)aggr#1",gr3,(*)Cuchar",gr4,gr5,#ProcAlias",fprintf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  114| 000184 ori      60000000   1
  115| 000188 addi     38600000   1     LI        gr3=0
  115| 00018C bl       4BFFFE75   1     CALL      exit,1,gr3,#ProcAlias",exit",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  115| 000190 ori      60000000   1
  115|                              CL.3:
  121| 000194 addi     3BE00000   1     LI        gr31=0
  124| 000198 addi     387E0078   1     AI        gr3=gr30,120
  124| 00019C bl       4BFFFE65   1     CALL      gr3=printf,1,(*)Cuchar",gr3,#ProcAlias",printf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  124| 0001A0 ori      60000000   1
  127| 0001A4 addi     38810070   1     AI        gr4=gr1,112
  127| 0001A8 ori      63830000   1     LR        gr3=gr28
  127| 0001AC ori      60210000   1
  124|                              CL.7:
  127| 0001B0 addi     38A00001   1     LI        gr5=1
  127| 0001B4 bl       4BFFFE4D   1     CALL      gr3=waitpid,3,gr3,(*)int",gr4,gr5,#ProcAlias",waitpid",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  127| 0001B8 ori      60000000   1
  137| 0001BC addi     3BFF0001   1     AI        gr31=gr31,1
  128| 0001C0 cmpwi    2C030000   1     C4        cr0=gr3,0
  128| 0001C4 bc       41800068   1     BT        CL.29,cr0,0x1/lt,taken=20%(20,80)
  143| 0001C8 addi     38600001   1     LI        gr3=1
  133| 0001CC bc       4181003C   1     BT        CL.12,cr0,0x2/gt,taken=20%(20,80)
  137| 0001D0 cmpwi    2C1F000A   1     C4        cr0=gr31,10
  137| 0001D4 bc       40800018   1     BF        CL.28,cr0,0x1/lt,taken=20%(20,80)
  143| 0001D8 bl       4BFFFE29   1     CALL      gr3=sleep,1,gr3,#ProcAlias",sleep",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  143| 0001DC ori      60000000   1
  127| 0001E0 addi     38810070   1     AI        gr4=gr1,112
  127| 0001E4 ori      63830000   1     LR        gr3=gr28
  145| 0001E8 b        4BFFFFC8   1     B         CL.7
    0|                              CL.28:
  139| 0001EC addi     387E0014   1     AI        gr3=gr30,20
  139| 0001F0 bl       4BFFFE11   1     CALL      gr3=printf,1,(*)Cuchar",gr3,#ProcAlias",printf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  139| 0001F4 ori      60000000   1
  140| 0001F8 addi     38800009   1     LI        gr4=9
  140| 0001FC ori      63830000   1     LR        gr3=gr28
  140| 000200 bl       4BFFFE01   1     CALL      gr3=kill,2,gr3,gr4,#ProcAlias",kill",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  140| 000204 ori      60000000   1
  145|                              CL.12:
  147| 000208 addi     38600000   1     LI        gr3=0
  148| 00020C ld       E98100B0   1     L8        gr12=#stack(gr1,176)
  148| 000210 addi     382100A0   1     AI        gr1=gr1,160
  148| 000214 mtspr    7D8803A6   1     LLR       lr=gr12
  148| 000218 ld       EB81FFE0   1     L8        gr28=#stack(gr1,-32)
  148| 00021C ld       EBA1FFE8   1     L8        gr29=#stack(gr1,-24)
  148| 000220 ld       EBC1FFF0   1     L8        gr30=#stack(gr1,-16)
  148| 000224 ld       EBE1FFF8   1     L8        gr31=#stack(gr1,-8)
    0|                              CL.71:
  148| 000228 bclr     4E800020   1     BA        lr
    0|                              CL.29:
  130| 00022C addi     387E000C   1     AI        gr3=gr30,12
  130| 000230 bl       4BFFFDD1   1     CALL      gr3=printf,1,(*)Cuchar",gr3,#ProcAlias",printf",fcr",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",fcr",xer",fsr",ca",ctr"
  130| 000234 ori      60000000   1
  147| 000238 addi     38600000   1     LI        gr3=0
  148| 00023C ld       E98100B0   1     L8        gr12=#stack(gr1,176)
  148| 000240 addi     382100A0   1     AI        gr1=gr1,160
  148| 000244 mtspr    7D8803A6   1     LLR       lr=gr12
  148| 000248 ld       EB81FFE0   1     L8        gr28=#stack(gr1,-32)
  148| 00024C ld       EBA1FFE8   1     L8        gr29=#stack(gr1,-24)
  148| 000250 ld       EBC1FFF0   1     L8        gr30=#stack(gr1,-16)
  148| 000254 ld       EBE1FFF8   1     L8        gr31=#stack(gr1,-8)
    0| 000258 b        4BFFFFD0   1     B         CL.71,-1
     |               Tag Table
     | 00025C        00000000 00002001 80040000 000001BC
     |               Instruction count          111
     |               Straight-line exec time    111
